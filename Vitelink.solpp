pragma soliditypp ^0.4.3;

contract Vitelink {
    address publisher;
  
    mapping(address => bool) nodeStorage;
    mapping(string => string) dataStorage;
    mapping(address => uint256) balanceStorage;
    address[] nodes;

    mapping(string => mapping(string => uint)) voteCache;
    mapping(string => address) requesterCache;

    event requested(string requestAddr);
    message _VitelinkCallback(string requestAddr, string resultData);

    tokenId viteToken = tokenId("tti_5649544520544f4b454e6e40");
    tokenId VitelinkToken = tokenId("tti_b26458ea4e540ab7365010bf");

    constructor() public {
      publisher = msg.sender;
      nodes.push(msg.sender);
    }

    onMessage () payable {
      if (msg.tokenid == viteToken && msg.amount == 10000 * 1e18) {
        if (nodeStorage[msg.sender] == true) {
          msg.sender.transfer(msg.tokenid, msg.amount);
        } else {
          nodeStorage[msg.sender] == true;
          nodes.push(msg.sender);
        }
      } else if (msg.tokenid == viteToken && msg.amount == 1 * 1e18) {
        require(msg.sender != publisher);
        if (nodeStorage[msg.sender] == true) {
          for (uint i = 0; i < nodes.length; i++) {
            if (nodes[i] == msg.sender) {
              delete nodes[i];
              msg.sender.transfer(msg.tokenid, 1000 * 1e18);
            }
          }
        }
      } else {
        revert();
      }
    }

    onMessage payForContract(address contractAddr) payable {
      if (msg.tokenid == VitelinkToken) {
        balanceStorage[contractAddr] += msg.amount;
      } else {
        revert();
      }
    }

    onMessage request(string calldata requestAddr) payable {
      require(requesterCache[requestAddr] != address(0x0));
      requesterCache[requestAddr] = msg.sender;
      emit requested(requestAddr);
    }

    onMessage requestedData(string calldata requestAddr, string calldata data) {
      require(nodeStorage[msg.sender] == true);
      voteCache[requestAddr][data] += 1;
      if (nodes.length / 2 <= voteCache[requestAddr][data]) {
        send(requesterCache[requestAddr], _VitelinkCallback(requestAddr, data)); 
        delete requesterCache[requestAddr];
        delete voteCache[requestAddr][data];
      }
    }
}
